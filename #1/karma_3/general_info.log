---------------------------------- Statistics ----------------------------------
It took 7874.07471036911 seconds to produce the 1th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = createReporters
Number of repair candidates: 0
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 5514.607624769211 seconds to produce the 2th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4812.048410415649 seconds to produce the 3th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 6593.798388242722 seconds to produce the 4th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: log.warn('SourceMap position not found for trace: %s', msg, msg)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 6030.521143436432 seconds to produce the 5th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation + msg.replace(/\n/g, '\n' + indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 6606.981693983078 seconds to produce the 6th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 7040.865670442581 seconds to produce the 7th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = indentation + msg.replace(/\n/g, '\n' | indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 8692.6313662529 seconds to produce the 8th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = indentation + msg.replace(SourceMapConsumer, '\n' + indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 9887.848338603973 seconds to produce the 9th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation + msg.replace(/\n/g, '\n' >= indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 7491.962742805481 seconds to produce the 10th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 10147.763187170029 seconds to produce the 11th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = indentation + msg.replace(/\n/g, '\n' ^ indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 8509.573939561844 seconds to produce the 12th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation % msg.replace(util, '\n' & indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 9943.19607758522 seconds to produce the 13th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation % msg.replace(util, '\n' & indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 8737.939212799072 seconds to produce the 14th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation / msg.replace(util, '\n' & indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 10149.629945278168 seconds to produce the 15th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation || msg.replace(util, '\n' & indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 10683.810225963593 seconds to produce the 16th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: log.warn('SourceMap position not found for trace: %s', msg, 'SourceMap position not found for trace: %s', msg, msg)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 10064.997661828995 seconds to produce the 17th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 14387.556056261063 seconds to produce the 18th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation + msg.replace(/\n/g, '\n' ^ indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 13161.591063261032 seconds to produce the 19th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation || msg.replace(util, '\n' & indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 8091.045871257782 seconds to produce the 20th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation * msg.replace(/\n/g, '\n' || indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 7933.654619693756 seconds to produce the 21th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation >= msg.replace('\n' || indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 8658.929384231567 seconds to produce the 22th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation + msg.replace(/\n/g, '\n' ^ indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 8926.428061246872 seconds to produce the 23th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation || msg.replace(util, '\n' & indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 6580.91265130043 seconds to produce the 24th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: log.warn('SourceMap position not found for trace: %s', msg, msg)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 10025.549484968185 seconds to produce the 25th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation - msg.replace(/\n/g, '\n' <= indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 11011.930530309677 seconds to produce the 26th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation + msg.replace(/\n/g, '\n' ^ indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 11305.363109827042 seconds to produce the 27th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation != msg.replace(util, '\n' >> indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 8892.622479915619 seconds to produce the 28th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation % msg.replace(util, '\n' * indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 6156.232717990875 seconds to produce the 29th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation - msg.replace(util, '\n' || indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 11199.161141872406 seconds to produce the 30th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: exports.createReporters = indentation * msg.replace(/\n/g, '\n' % indentation)
Number of repair candidates: 1
--------------------------------------------------------------------------------

-------------------------------- General info --------------------------------
Project: Karma
Bug-ID: 3
Total elapsed time: 265370.6095044613 sec
Number of generated candidates: 1
------------------------------------------------------------------------------
