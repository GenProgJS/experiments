---------------------------------- Statistics ----------------------------------
It took 392.31767654418945 seconds to produce the 1th generation.
Best fitness: 700.0
Worst fitness: 709.0
Mean fitness: 708.55
Population size: 20
"Best" modification so far: if (!trust(this.connection.remoteAddress, this.params)) {
Number of repair candidates: 0
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 139.95198488235474 seconds to produce the 2th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(this.res)) {
Number of repair candidates: 0
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 236.1143548488617 seconds to produce the 3th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(this.connection.remoteAddress)) {
Number of repair candidates: 0
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 298.2759704589844 seconds to produce the 4th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(this.connection.remoteAddress)) {
Number of repair candidates: 0
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 206.87387084960938 seconds to produce the 5th generation.
Best fitness: 709.0
Worst fitness: 745.0
Mean fitness: 713.05
Population size: 20
"Best" modification so far: if (!trust(utils.parseAccept)) {
Number of repair candidates: 0
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 355.64106488227844 seconds to produce the 6th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(this.connection.remoteAddress)) {
Number of repair candidates: 0
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 266.42375111579895 seconds to produce the 7th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(this.connection.remoteAddress)) {
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 296.3875870704651 seconds to produce the 8th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(this.host.__proto__)) {
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 257.9673275947571 seconds to produce the 9th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(this.connection.remoteAddress)) {
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 535.404618024826 seconds to produce the 10th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!req.__defineGetter__('protocol', function(){
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 577.5812737941742 seconds to produce the 11th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(this.connection.remoteAddress.remoteAddress)) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 496.97832107543945 seconds to produce the 12th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length / 1 : 0 >= 0 ? 0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length - 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 324.9653353691101 seconds to produce the 13th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length / 1 : 0 >= 0 ? 0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length + 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 818.0509798526764 seconds to produce the 14th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 + proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 ** proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 563.1032984256744 seconds to produce the 15th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length / 1 : 0 >= 0 ? 0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length / 1 : 0 < proto.split(/\s*,\s*/).length ? 0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length - 1 : 0 : proto.split(/\s*,\s*/).length % 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 632.6870465278625 seconds to produce the 16th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length & 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length / 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 946.5224442481995 seconds to produce the 17th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 | 0 ? 0 / proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 767.8517954349518 seconds to produce the 18th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length >= 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length / 1 : 0 % proto.split(/\s*,\s*/).length])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 760.8027467727661 seconds to produce the 19th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(this.connection.remoteAddress, 'acceptedEncodings')) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 864.1871984004974 seconds to produce the 20th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 * proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 | 0 ? 0 / proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 906.7840838432312 seconds to produce the 21th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 * proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 | 0 ? 0 / proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0 < 0 || 0 * proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 | 0 ? 0 / proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0 >= proto.split(/\s*,\s*/).length ? Math.floor(Math.random() * proto.split(/\s*,\s*/).length) : 0 * proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 | 0 ? 0 / proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 669.4667360782623 seconds to produce the 22th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length / 1 : 0 >= 0 ? 0 < 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 >= 0 ? 0 < proto.split(/\s*,\s*/).length ? 0 : proto.split(/\s*,\s*/).length + 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 936.796181678772 seconds to produce the 23th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 % proto.split(/\s*,\s*/).length % proto.split(/\s*,\s*/).length < 0 || 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 % proto.split(/\s*,\s*/).length % proto.split(/\s*,\s*/).length >= proto.split(/\s*,\s*/).length ? Math.floor(Math.random() * proto.split(/\s*,\s*/).length) : 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 % proto.split(/\s*,\s*/).length % proto.split(/\s*,\s*/).length])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 894.6181247234344 seconds to produce the 24th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length >= 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 + proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length / 1 : 0 % proto.split(/\s*,\s*/).length])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 895.7051577568054 seconds to produce the 25th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 >= 0 ? 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 906.7933549880981 seconds to produce the 26th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 | 0 ? 0 / proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 1055.1705360412598 seconds to produce the 27th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 | 0 ? 0 / proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length >= 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length / 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 667.5272142887115 seconds to produce the 28th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length >= 0 ? 0 % proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 / proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length - 1 : 0 % proto.split(/\s*,\s*/).length % proto.split(/\s*,\s*/).length])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 1095.6814105510712 seconds to produce the 29th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length & 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length / 1 : 0 >= 0 ? 0 ** proto.split(/\s*,\s*/).length & 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length / 1 : 0 < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length & 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 >= proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length / 1 : 0 : proto.split(/\s*,\s*/).length - 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 752.5743856430054 seconds to produce the 30th generation.
Best fitness: 709.0
Worst fitness: 709.0
Mean fitness: 709.0
Population size: 20
"Best" modification so far: if (!trust(proto.split(/\s*,\s*/)[0 % proto.split(/\s*,\s*/).length & 0 ? 0 / proto.split(/\s*,\s*/).length < proto.split(/\s*,\s*/).length ? 0 % proto.split(/\s*,\s*/).length : proto.split(/\s*,\s*/).length / 1 : 0])) {
Number of repair candidates: 2
--------------------------------------------------------------------------------

-------------------------------- General info --------------------------------
Project: Express
Bug-ID: 2
Total elapsed time: 18540.838895082474 sec
Number of generated candidates: 2
------------------------------------------------------------------------------
