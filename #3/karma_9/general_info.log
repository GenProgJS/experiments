---------------------------------- Statistics ----------------------------------
It took 666.7901756763458 seconds to produce the 1th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 299.6
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 7
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 251.3608582019806 seconds to produce the 2th generation.
Best fitness: 296.0
Worst fitness: 377.0
Mean fitness: 307.7
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 7
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 423.8580787181854 seconds to produce the 3th generation.
Best fitness: 296.0
Worst fitness: 377.0
Mean fitness: 318.5
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 7
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 547.6968007087708 seconds to produce the 4th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 324.8
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 7
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 516.9297621250153 seconds to produce the 5th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 339.2
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 8
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 687.0005903244019 seconds to produce the 6th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 346.4
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 8
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 767.4907591342926 seconds to produce the 7th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 350.0
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 8
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 743.2643077373505 seconds to produce the 8th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 350.0
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 9
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 554.7339913845062 seconds to produce the 9th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 350.0
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 9
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 745.3334431648254 seconds to produce the 10th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 353.6
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 11
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 783.8150777816772 seconds to produce the 11th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 353.6
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 14
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 720.9320075511932 seconds to produce the 12th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 357.2
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 14
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 534.6389694213867 seconds to produce the 13th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 357.2
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 14
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 610.1037414073944 seconds to produce the 14th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 357.2
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 14
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 624.7051107883453 seconds to produce the 15th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 357.2
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 14
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 721.859302520752 seconds to produce the 16th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 357.2
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 14
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 703.0119521617889 seconds to produce the 17th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 360.8
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 14
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 563.9690461158752 seconds to produce the 18th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 360.8
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 14
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 862.1288027763367 seconds to produce the 19th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 360.8
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 17
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 661.2491202354431 seconds to produce the 20th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 364.4
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 17
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 629.183337688446 seconds to produce the 21th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 364.4
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 17
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 544.9386155605316 seconds to produce the 22th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 364.4
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 18
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 770.1593260765076 seconds to produce the 23th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 364.4
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 18
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 738.5737543106079 seconds to produce the 24th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 364.4
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 18
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 963.3251464366913 seconds to produce the 25th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 364.4
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 19
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 846.1385545730591 seconds to produce the 26th generation.
Best fitness: 296.0
Worst fitness: 368.0
Mean fitness: 364.4
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, '') || '/';
Number of repair candidates: 19
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 693.5050189495087 seconds to produce the 27th generation.
Best fitness: 368.0
Worst fitness: 368.0
Mean fitness: 368.0
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, './logger') || +1 - -1;
Number of repair candidates: 19
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 619.6579880714417 seconds to produce the 28th generation.
Best fitness: 368.0
Worst fitness: 368.0
Mean fitness: 368.0
Population size: 20
"Best" modification so far: return pattern.replace(true) || !-1 > +1 === -1;
Number of repair candidates: 19
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 724.0436043739319 seconds to produce the 29th generation.
Best fitness: 368.0
Worst fitness: 368.0
Mean fitness: 368.0
Population size: 20
"Best" modification so far: return pattern.replace(/\/[^\/]*[\*\(].*$/, './logger') || -1 % -1;
Number of repair candidates: 21
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 694.4591355323792 seconds to produce the 30th generation.
Best fitness: 368.0
Worst fitness: 368.0
Mean fitness: 368.0
Population size: 20
"Best" modification so far: return pattern.replace && pattern.replace(/\/[^\/]*[\*\(].*$/, './logger') || -1 && -1;
Number of repair candidates: 22
--------------------------------------------------------------------------------

-------------------------------- General info --------------------------------
Project: Karma
Bug-ID: 9
Total elapsed time: 20034.33582162857 sec
Number of generated candidates: 22
------------------------------------------------------------------------------
