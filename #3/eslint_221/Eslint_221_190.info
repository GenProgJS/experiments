Generation: 18
Elapsed time: 49647.220163822174sec
# of failed test cases in buggy version: 6
# of failed test cases in current version: 6
List of applied operators:
NullCheckOperator; return parent.static && parent.static;
FunctionMakerOperator; return parent.static && parent.static();
NullCheckOperator; return parent.static && !parent.static() && parent.static();
ExprReplacerOperator; return parent.static && !parent.static() && scope.set.get();
ExprReplacerOperator; return parent.static && !parent.static() && isNullOrUndefined(parent.arguments[2]);
ArraySubscripterOperator; return parent.static && !parent.static() && isNullOrUndefined(parent.arguments[2 % parent.arguments.length]);
ArraySubscripterOperator; return parent.static && !parent.static() && isNullOrUndefined(parent.arguments[2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length]);
ArraySubscripterOperator; return parent.static && !parent.static() && isNullOrUndefined(parent.arguments[2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0]);
ArraySubscripterOperator; return parent.static && !parent.static() && isNullOrUndefined(parent.arguments[2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0 < 0 || 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0 >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0]);
ArithmeticBinaryOperatorChanger; return parent.static && !parent.static() && isNullOrUndefined(parent.arguments[2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0 < 0 || 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 / parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0 >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0]);
ArithmeticBinaryOperatorChanger; return parent.static && !parent.static() && isNullOrUndefined(parent.arguments[2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 - parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0 < 0 || 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 / parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0 >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0]);
FunctionCallRemoverOperator; return parent.static && !parent.static && isNullOrUndefined(parent.arguments[2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 - parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0 < 0 || 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 / parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0 >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length >= 0 ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length < parent.arguments.length ? 2 % parent.arguments.length < 0 || 2 % parent.arguments.length >= parent.arguments.length ? Math.floor(Math.random() * parent.arguments.length) : 2 % parent.arguments.length : parent.arguments.length - 1 : 0]);