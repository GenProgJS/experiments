---------------------------------- Statistics ----------------------------------
It took 8924.953663110733 seconds to produce the 1th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 7907.776806354523 seconds to produce the 2th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: log.warn
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 6864.739524841309 seconds to produce the 3th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: input.replace('SourceMap position not found for trace: %s', msg)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 6974.156483411789 seconds to produce the 4th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: log.warn(createErrorFormatter, msg)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4168.711869955063 seconds to produce the 5th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3276.2456636428833 seconds to produce the 6th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3056.9597718715668 seconds to produce the 7th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace(/\n/g, '\n' / indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4148.495329380035 seconds to produce the 8th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: log.warn(createErrorFormatter, msg)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3748.2853944301605 seconds to produce the 9th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: log.warn('SourceMap position not found for trace: %s', MultiReporter, msg, msg)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4783.814320087433 seconds to produce the 10th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 6736.91014957428 seconds to produce the 11th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' / indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 6299.091029167175 seconds to produce the 12th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 8258.230274915695 seconds to produce the 13th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg = config.formatError(msg)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 8257.415466308594 seconds to produce the 14th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: log.warn('SourceMap position not found for trace: %s', msg, config.reportSlowerThan)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 8034.504915237427 seconds to produce the 15th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' && indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 7837.105148077011 seconds to produce the 16th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace(/\n/g !== indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 7900.895993947983 seconds to produce the 17th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace(/\n/g !== indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3178.4760913848877 seconds to produce the 18th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' - indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3219.6780591011047 seconds to produce the 19th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' && indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2023.562686920166 seconds to produce the 20th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' && indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2790.7830238342285 seconds to produce the 21th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace(/\n/g, '\n' < indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3667.0891506671906 seconds to produce the 22th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' >> indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3402.097368478775 seconds to produce the 23th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' - indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2719.0750036239624 seconds to produce the 24th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' > '\n' ^ indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2575.823208808899 seconds to produce the 25th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' | '\n' + indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3125.671813726425 seconds to produce the 26th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' - '\n' % indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3275.040209531784 seconds to produce the 27th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' ^ '\n' !== indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2961.796356201172 seconds to produce the 28th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' ^ '\n' / indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2759.880568265915 seconds to produce the 29th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace('\n' * '\n' % indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2932.477926492691 seconds to produce the 30th generation.
Best fitness: 517.0
Worst fitness: 517.0
Mean fitness: 517.0
Population size: 20
"Best" modification so far: msg.replace(/\n/g, '\n' < indentation)
Number of repair candidates: 2
--------------------------------------------------------------------------------

-------------------------------- General info --------------------------------
Project: Karma
Bug-ID: 3
Total elapsed time: 146065.50496339798 sec
Number of generated candidates: 2
------------------------------------------------------------------------------
