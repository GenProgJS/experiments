Generation: 26
Elapsed time: 17005.821237564087sec
# of failed test cases in developer-fixed version: 1
# of failed test cases in current version: 1
List of applied operators:
CallChangerOperator; return pattern.replace(/\/[^\/]*[\*\(].*$/, require) || '/';
CallChangerOperator; return pattern.replace(/\/[^\/]*[\*\(].*$/, /\/[^\/]*[\*\(].*$/, require) || '/';
NullCheckOperator; return pattern.replace(/\/[^\/]*[\*\(].*$/, /\/[^\/]*[\*\(].*$/, require) && pattern.replace(/\/[^\/]*[\*\(].*$/, /\/[^\/]*[\*\(].*$/, require) || '/';
CallChangerOperator; return pattern.replace(/\/[^\/]*[\*\(].*$/, /\/[^\/]*[\*\(].*$/, pattern.replace) && pattern.replace(/\/[^\/]*[\*\(].*$/, /\/[^\/]*[\*\(].*$/, require) || '/';
CallChangerOperator; return pattern.replace(/\/[^\/]*[\*\(].*$/, pattern.replace) && pattern.replace(/\/[^\/]*[\*\(].*$/, /\/[^\/]*[\*\(].*$/, require) || '/';
CallChangerOperator; return pattern.replace(/\/[^\/]*[\*\(].*$/, pattern.replace) && pattern.replace(chokidar, /\/[^\/]*[\*\(].*$/, require) || '/';
BinaryOperatorChanger; return pattern.replace(/\/[^\/]*[\*\(].*$/, pattern.replace) ** pattern.replace(chokidar, /\/[^\/]*[\*\(].*$/, require) || '/';