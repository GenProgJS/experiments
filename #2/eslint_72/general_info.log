---------------------------------- Statistics ----------------------------------
It took 1002.9317781925201 seconds to produce the 1th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: lastItem.loc.end,
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 1019.3269875049591 seconds to produce the 2th generation.
Best fitness: 13185.0
Worst fitness: 13284.0
Mean fitness: 13194.9
Population size: 20
"Best" modification so far: loc: lastItem.loc.end || lastItem.loc.end,
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 1863.613692998886 seconds to produce the 3th generation.
Best fitness: 13185.0
Worst fitness: 13284.0
Mean fitness: 13203.45
Population size: 20
"Best" modification so far: loc: !lastItem.loc && lastItem.loc.end || lastItem.loc.end,
Number of repair candidates: 1
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 1414.0736336708069 seconds to produce the 4th generation.
Best fitness: 13185.0
Worst fitness: 13284.0
Mean fitness: 13198.5
Population size: 20
"Best" modification so far: loc: lastItem.loc.end,
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2041.1126005649567 seconds to produce the 5th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: lastItem.loc.end,
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2500.448110103607 seconds to produce the 6th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: lastItem.loc.end || lastItem.lastToken().meta,
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2407.855804681778 seconds to produce the 7th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.getSourceCode.end || lastItem.loc.end,
Number of repair candidates: 2
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2721.428751707077 seconds to produce the 8th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random) : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4050.8137192726135 seconds to produce the 9th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && forbidTrailingComma("code").end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3143.0880041122437 seconds to produce the 10th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && forbidTrailingComma("code").end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4167.9104697704315 seconds to produce the 11th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() * context.options.length) : 0 % context.options.length % context.options.length].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3768.8161029815674 seconds to produce the 12th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() * context.options.length) : 0 ** context.options.length % context.options.length >= 0 ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() * context.options.length) : 0 ** context.options.length % context.options.length < context.options.length ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() - context.options.length) : 0 ** context.options.length % context.options.length : context.options.length - 1 : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4604.555750846863 seconds to produce the 13th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.getSourceCode.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4548.405905723572 seconds to produce the 14th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() / context.options.length) : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4642.914887189865 seconds to produce the 15th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() + context.options.length) : 0 >= 0 ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() + context.options.length) : 0 < context.options.length ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() * context.options.length) : 0 : context.options.length - 1 : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4241.333812236786 seconds to produce the 16th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() % context.options.length) : 0 % context.options.length % context.options.length].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4308.820870399475 seconds to produce the 17th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() % context.options.length) : 0 === context.options.length % context.options.length].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3813.007813692093 seconds to produce the 18th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() % context.options.length) : 0 % context.options.length % context.options.length].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4738.552887201309 seconds to produce the 19th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() * context.options.length) : 0 >= 0 ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() + context.options.length) : 0 < context.options.length ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() * context.options.length) : 0 : context.options.length - 1 : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4041.407219171524 seconds to produce the 20th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 >= 0 ? 0 < context.options.length ? 0 : context.options.length + 1 : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 3564.4515442848206 seconds to produce the 21th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.getSourceCode.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4371.9114818573 seconds to produce the 22th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && forbidTrailingComma("code").end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 5402.785416603088 seconds to produce the 23th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 >= 0 ? 0 < context.options.length ? 0 : context.options.length + 1 : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 5840.338529348373 seconds to produce the 24th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length / context.options.length % context.options.length >= 0 ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 * context.options.length / context.options.length % context.options.length < context.options.length ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length / context.options.length % context.options.length : context.options.length - 1 : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 5185.189049243927 seconds to produce the 25th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() % context.options.length) : 0 === context.options.length % context.options.length].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 5071.579986333847 seconds to produce the 26th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.getSourceCode.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4679.58898973465 seconds to produce the 27th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length * context.options.length % context.options.length >= 0 ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length / context.options.length % context.options.length < context.options.length ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 * context.options.length / context.options.length % context.options.length : context.options.length - 1 : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4100.18222117424 seconds to produce the 28th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length * context.options.length % context.options.length >= 0 ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length / context.options.length % context.options.length < context.options.length ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length / context.options.length % context.options.length : context.options.length - 1 : 0 < 0 || 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length * context.options.length % context.options.length >= 0 ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length / context.options.length % context.options.length < context.options.length ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length / context.options.length % context.options.length : context.options.length - 1 : 0 >= context.options.length ? Math.floor(Math.random() * context.options.length) : 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length * context.options.length % context.options.length >= 0 ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length / context.options.length % context.options.length < context.options.length ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length / context.options.length % context.options.length : context.options.length - 1 : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 3
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 2897.840610265732 seconds to produce the 29th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length * context.options.length % context.options.length >= 0 ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 - context.options.length / context.options.length % context.options.length < context.options.length ? 0 < 0 || 0 >= context.options.length ? Math.floor(Math.random() >= context.options.length) : 0 * context.options.length / context.options.length % context.options.length : context.options.length - 1 : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 4
--------------------------------------------------------------------------------
---------------------------------- Statistics ----------------------------------
It took 4968.644915342331 seconds to produce the 30th generation.
Best fitness: 13185.0
Worst fitness: 13185.0
Mean fitness: 13185.0
Population size: 20
"Best" modification so far: loc: !lastItem.loc && context.options[0 >= 0 ? 0 < context.options.length ? 0 : context.options.length + 1 : 0].elements.loc.end || lastItem.loc.end,
Number of repair candidates: 4
--------------------------------------------------------------------------------

-------------------------------- General info --------------------------------
Project: Eslint
Bug-ID: 72
Total elapsed time: 111220.37844872475 sec
Number of generated candidates: 4
------------------------------------------------------------------------------
